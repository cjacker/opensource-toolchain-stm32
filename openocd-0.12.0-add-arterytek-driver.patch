diff -Nur openocd/contrib/60-openocd.rules openocd.arteryTek/contrib/60-openocd.rules
--- openocd/contrib/60-openocd.rules	2023-01-15 17:56:19.000000000 +0800
+++ openocd.arteryTek/contrib/60-openocd.rules	2023-02-20 22:11:15.241233704 +0800
@@ -232,4 +232,7 @@
 # CMSIS-DAP compatible adapters
 ATTRS{product}=="*CMSIS-DAP*", MODE="660", GROUP="plugdev", TAG+="uaccess"
 
+# Artery ATLINK
+ATTRS{idVendor}=="2e3c", ATTRS{idProduct}=="f000, MODE="660", GROUP="plugdev", TAG+="uaccess"
+
 LABEL="openocd_rules_end"
二进制文件 openocd/.git/index 和 openocd.arteryTek/.git/index 不同
diff -Nur openocd/src/flash/nor/at32f4xx.c openocd.arteryTek/src/flash/nor/at32f4xx.c
--- openocd/src/flash/nor/at32f4xx.c	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/src/flash/nor/at32f4xx.c	2023-02-20 22:11:15.242233706 +0800
@@ -0,0 +1,1216 @@
+/***************************************************************************
+ *   Copyright (C) 2005 by Dominic Rath                                    *
+ *   Dominic.Rath@gmx.de                                                   *
+ *                                                                         *
+ *   Copyright (C) 2008 by Spencer Oliver                                  *
+ *   spen@spen-soft.co.uk                                                  *
+ *                                                                         *
+ *   Copyright (C) 2011 by Andreas Fritiofson                              *
+ *   andreas.fritiofson@gmail.com                                          *
+ *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *
+ ***************************************************************************/
+#if 0
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "imp.h"
+#include <helper/binarybuffer.h>
+#include <target/algorithm.h>
+#include <target/armv7m.h>
+//#include "at32xx.h"
+#endif
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <string.h>
+
+#include "imp.h"
+#include <helper/binarybuffer.h>
+#include <target/algorithm.h>
+#include <target/cortex_m.h>
+#include "at32xx.h"
+
+
+
+#define AT32_PROJECT_ID                   AT32F407XX_ID
+
+/* at32xx flash description */
+#define MCU_HELP                          "at32xx flash command group"
+
+/* flash unlock keys */
+#define KEY1			                  0x45670123
+#define KEY2			                  0xCDEF89AB
+
+/* flash erase timeout values */
+#define FLASH_WRITE_TIMEOUT               100
+#define FLASH_SECTOR_ERASE_TIMEOUT        1000
+#define FLASH_MASS_ERASE_TIMEOUT          20000
+
+
+
+#define BANK1_BASE_ADDR                   0x08000000
+#define BANK2_BASE_ADDR                   0x08080000
+#define BANK2_BASE_ADDR_4M                0x08200000
+
+/* sector size */
+#define SECTOR_SIZE_0_5K                  0x200
+#define SECTOR_SIZE_1K                    0x400
+#define SECTOR_SIZE_2K                    0x800
+#define SECTOR_SIZE_4K                    0x1000
+
+#ifdef SUPPORT_BANK3
+#define BANK3_TYPE1                       1
+#define BANK3_TYPE2                       2
+#define BANK3_TYPE1_STR                   "BANK3_TYPE1"
+#define BANK3_TYPE2_STR                   "BANK3_TYPE2"
+#endif
+
+/* flash base register address */
+//#define AT32_FLASH_BANK1_REG              0x40022000
+//#define AT32_FLASH_BANK2_REG              0x40022040
+
+
+#define AT32_FLASH_PSR_OFFSET             0x00
+#define AT32_FLASH_UNLOCK_OFFSET          0x04
+#define AT32_FLASH_USD_UNLOCK_OFFSET      0x08
+#define AT32_FLASH_STS_OFFSET             0x0C
+#define AT32_FLASH_CTRL_OFFSET            0x10
+#define AT32_FLASH_ADDR_OFFSET            0x14
+#define AT32_FLASH_USD_OFFSET             0x1C
+#define AT32_FLASH_EPPS_OFFSET            0x20
+#define AT32_FLASH_EPPS1_OFFSET           0x2C
+
+/* flash ctrl register bits */
+#define FLASH_FPRGM			              (1 << 0)
+#define FLASH_SECERS				      (1 << 1)
+#define FLASH_BANKERS			          (1 << 2)
+#define FLASH_USDPRGM			          (1 << 4)
+#define FLASH_USDERS			          (1 << 5)
+#define FLASH_ERSTR			              (1 << 6)
+#define FLASH_OPLK			              (1 << 7)
+#define FLASH_USDULKS		              (1 << 9)
+
+/* flash sts register bits */
+#define FLASH_OBF		                  (1 << 0)
+#define FLASH_PRGMERR		              (1 << 2)
+#define FLASH_EPPERR	                  (1 << 4)
+#define FLASH_ODF		                  (1 << 5)
+
+/* flash usd bits */
+#define FLASH_USDERR		              0
+#define FLASH_FAP		                  1
+#define FLASH_WDT_ATO_EN		          2
+#define FLASH_DEPSLP_RST	              3
+#define FLASH_STDBY_RST	                  4
+
+/*at32 user system data*/
+struct at32x_usd_data {
+	uint8_t rdp;
+	uint8_t user;
+	uint16_t data;
+	uint32_t protection;
+};
+
+/* at32 mcu type*/
+
+
+struct at32_flash_info
+{
+	uint8_t         project_id;
+	uint32_t        pid;
+	uint32_t        flash_size;
+	uint16_t        sector_size;
+	uint32_t        bank_addr;
+	uint32_t        bank_size;
+	uint32_t        cur_reg_base;
+	uint32_t        sector_num;
+	uint8_t         probed;
+	uint8_t         type_id;
+
+	mcu_type_info   *type;
+	struct at32x_usd_data usd_data;
+	
+};
+
+#define AT32_PROJECT_ID_ADDR              0x1FFFF7F3
+#define AT32_FLASH_SIZE_ADDR              0x1FFFF7E0
+#define AT32_PRODUCT_ID_ADDR              0xE0042000
+#define AT32_BANK1_BASE_ADDR              0x40022000
+#define AT32_BANK2_BASE_ADDR              0x40022040
+#define AT32_BANK3_BASE_ADDR              0x40022080
+#define AT32_USD_BASE_ADDR                0x1FFFF800
+#define AT32_USD_LENGTH                   48
+
+#if 0
+#define SUPPORT_LIST_LEN                  6
+static uint8_t support_list1[SUPPORT_LIST_LEN] =
+{
+	0, //403
+	1, //413
+	2, //415
+	3, //403a
+	4, //407
+	0xa, //WB415
+}
+;
+#endif
+
+
+static int at32x_mass_erase(struct flash_bank *bank);
+static int at32x_get_product_id(struct flash_bank *bank, uint32_t *product_id);
+static int at32x_write_block(struct flash_bank *bank, const uint8_t *buffer,
+		uint32_t address, uint32_t count);
+static int at32x_get_project_id(struct flash_bank *bank, uint8_t *project_id);
+
+#if 0
+static int get_at32f403_info(struct flash_bank *bank, char *buf, int buf_size);
+static int get_at32f413_info(struct flash_bank *bank, char *buf, int buf_size);
+static int get_at32f415_info(struct flash_bank *bank, char *buf, int buf_size);
+static int get_at32f403a_info(struct flash_bank *bank, char *buf, int buf_size);
+static int get_at32f407_info(struct flash_bank *bank, char *buf, int buf_size);
+static int get_at32wb415_info(struct flash_bank *bank, char *buf, int buf_size);
+#endif
+
+static inline void at32x_set_base_reg(struct flash_bank *bank, uint32_t bank_reg);
+
+static int at32x_get_project_id(struct flash_bank *bank, uint8_t *project_id)
+{
+	struct target *target = bank->target;
+	int retval = target_read_u8(target, AT32_PROJECT_ID_ADDR, project_id);
+	if (retval != ERROR_OK)
+		return retval;
+	return ERROR_OK;
+}
+
+static int at32x_get_product_id(struct flash_bank *bank, uint32_t *product_id)
+{
+	int retval;
+	struct target *target = bank->target;
+	retval = target_read_u32(target, AT32_PRODUCT_ID_ADDR, product_id);
+	if (retval != ERROR_OK)
+		return retval;
+
+	return retval;
+}
+
+static int at32x_get_flash_size(struct flash_bank *bank, uint16_t *flash_size_in_kb)
+{
+	struct target *target = bank->target;
+	int retval;
+	retval = target_read_u16(target, AT32_FLASH_SIZE_ADDR, flash_size_in_kb);
+	if (retval != ERROR_OK)
+		return retval;
+	return retval;
+}
+
+
+static int at32_get_device_info(struct flash_bank *bank)
+{
+	int retval, sector;
+	uint8_t index;
+	struct at32_flash_info *at32x_info = bank->driver_priv;
+
+	retval = at32x_get_project_id(bank, &(at32x_info->project_id));
+	if (retval != ERROR_OK)
+		return retval;
+#if 0
+	LOG_INFO("This is target %s algorithm", AT32_MCU_SERIES_STRING);
+	if(at32x_info->project_id != AT32_PROJECT_ID)
+	{
+		for(index = 0; index < NUM_OF_MCU_TYPE; index ++)
+		{
+			if(at32_mcu_type[index].project_id == at32x_info->project_id)
+			{
+				at32x_info->type = &at32_mcu_type[index];
+				break;
+			}
+		}
+		if(index == NUM_OF_MCU_TYPE)
+		{
+			LOG_ERROR("target is not at32");
+			return ERROR_FAIL;
+		}
+		else
+		{
+			LOG_ERROR("target is %s, please select the matching algorithm", at32x_info->type->name);
+			return ERROR_FAIL;
+		}
+	}
+#endif
+	for(index = 0; index < NUM_OF_MCU_TYPE; index ++)
+	{
+		if(at32x_info->project_id == at32_mcu_type[index].project_id)
+		{
+			at32x_info->type_id = index;
+			break;
+		}
+	}
+	if(index == NUM_OF_MCU_TYPE)
+	{
+		LOG_ERROR("please select the matching algorithm");
+		return ERROR_FAIL;
+	}
+	LOG_INFO(">This is target %s algorithm", at32_mcu_type[at32x_info->type_id].name);
+	
+		
+	retval = at32x_get_product_id(bank, &(at32x_info->pid));
+	if (retval != ERROR_OK)
+		return retval;
+	
+	retval = at32x_get_flash_size(bank, (uint16_t *)&(at32x_info->flash_size));
+	if (retval != ERROR_OK)
+		return retval;
+
+	at32x_info->flash_size &= 0xFFFF;
+	
+	sector = (0x00007000 & at32x_info->pid) >> 12;
+	switch(sector)
+	{
+		case 1:
+			at32x_info->sector_size = SECTOR_SIZE_0_5K;
+			break;
+		case 2:
+			at32x_info->sector_size = SECTOR_SIZE_1K;
+			break;
+		case 3:
+			at32x_info->sector_size = SECTOR_SIZE_2K;
+			break;
+		case 4:
+			at32x_info->sector_size = SECTOR_SIZE_4K;
+			break;
+		default:
+			if(at32x_info->flash_size >= 256)
+				at32x_info->sector_size = SECTOR_SIZE_2K;
+			else
+				at32x_info->sector_size = SECTOR_SIZE_1K;
+			break;
+				
+	}
+	if(at32x_info->bank_addr == BANK1_BASE_ADDR)
+	{
+		at32x_info->cur_reg_base = at32_mcu_type[at32x_info->type_id].flash_bank1_reg;
+#if 0
+		if(at32x_info->project_id == AT32F435XX_ID || at32x_info->project_id == AT32F437XX_ID)
+		{
+			at32x_info->cur_reg_base = AT32_BANK1_BASE_ADDR;
+		}
+		else
+		{
+			at32x_info->cur_reg_base = AT32_BANK1_BASE_ADDR;
+		}
+#endif
+	}
+	else if((at32x_info->bank_addr == BANK2_BASE_ADDR || 
+		    at32x_info->bank_addr == BANK2_BASE_ADDR_4M) && 
+		   at32x_info->flash_size > 512)
+	{
+		at32x_info->cur_reg_base = at32_mcu_type[at32x_info->type_id].flash_bank2_reg;
+	}
+	else
+	{
+		LOG_ERROR("not have this flash bank address: %x", at32x_info->bank_addr);
+		return ERROR_FAIL;
+	}
+
+	if(at32x_info->flash_size > 512)
+	{
+		/*two bank: each bank 512kb*/
+		if(at32x_info->flash_size > 1024)
+		{
+			if(at32x_info->bank_addr == BANK1_BASE_ADDR)
+			{
+				at32x_info->bank_size = 0x200000;  //2048 Kb
+				at32x_info->sector_num = at32x_info->bank_size / at32x_info->sector_size;
+			}
+			else
+			{
+				at32x_info->bank_size = (at32x_info->flash_size << 10) - 0x200000;
+				at32x_info->sector_num = at32x_info->bank_size / at32x_info->sector_size;
+			}
+			
+		}
+		else
+		{
+			if(at32x_info->bank_addr == BANK1_BASE_ADDR)
+			{
+				at32x_info->bank_size = 0x80000;  //512 Kb
+				at32x_info->sector_num = at32x_info->bank_size / at32x_info->sector_size;
+			}
+			else
+			{
+				at32x_info->bank_size = (at32x_info->flash_size << 10) - 0x80000;
+				at32x_info->sector_num = at32x_info->bank_size / at32x_info->sector_size;
+			}
+		}
+	}
+	else
+	{
+		at32x_info->sector_num = (at32x_info->flash_size << 10) / at32x_info->sector_size;
+		at32x_info->bank_size = at32x_info->flash_size << 10;		
+	}
+
+#if 0
+	if(at32x_info->flash_size > 512)
+	{
+		/*two bank: each bank 512kb*/
+		at32x_info->bank_size = (at32x_info->flash_size << 10) / 2;
+		at32x_info->sector_num = (at32x_info->flash_size << 10) / at32x_info->sector_size / 2;
+	}
+	else
+	{
+		at32x_info->sector_num = (at32x_info->flash_size << 10) / at32x_info->sector_size;
+		at32x_info->bank_size = at32x_info->flash_size << 10;		
+	}
+#endif
+	at32x_info->probed = 1;
+	LOG_INFO(">flash size: 0x%" PRIx32 " byte", (at32x_info->flash_size << 10));
+	LOG_INFO(">flash sector num : 0x%" PRIx32 "", at32x_info->sector_num);
+	LOG_INFO(">flash sector size : 0x%" PRIx32 "", at32x_info->sector_size);
+	LOG_INFO(">flash bank size : 0x%" PRIx32 "", at32x_info->bank_size);
+	LOG_INFO(">%s", at32_mcu_type[at32x_info->type_id].name);
+	return ERROR_OK;
+
+}
+
+/* flash bank at32x <base> <size> 0 0 <target#>
+ */
+FLASH_BANK_COMMAND_HANDLER(at32x_flash_bank_command)
+{
+	struct at32_flash_info *at32x_info;
+	
+	if (CMD_ARGC < 6)
+		return ERROR_COMMAND_SYNTAX_ERROR;
+	at32x_info = malloc(sizeof(struct at32_flash_info));
+	
+	bank->driver_priv = at32x_info;
+	at32x_info->bank_addr = bank->base;
+	at32x_info->probed = 0;
+	return ERROR_OK;
+}
+
+static inline void at32x_set_base_reg(struct flash_bank *bank, uint32_t bank_reg)
+{
+    struct at32_flash_info *at32x_info = bank->driver_priv;
+	at32x_info->cur_reg_base = bank_reg;
+}
+static inline int at32x_get_flash_reg(struct flash_bank *bank, uint32_t reg)
+{
+   
+	struct at32_flash_info *at32x_info = bank->driver_priv;
+	return (reg + at32x_info->cur_reg_base);
+}
+
+static inline int at32x_get_flash_status(struct flash_bank *bank, uint32_t *status)
+{
+	struct target *target = bank->target;
+	return target_read_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_STS_OFFSET), status);
+}
+
+static int at32x_wait_status_busy(struct flash_bank *bank, int timeout)
+{
+	struct target *target = bank->target;
+	struct at32_flash_info *at32x_info = bank->driver_priv;
+	uint32_t status;
+	int retval = ERROR_OK;
+	/* wait for busy to clear */
+	for (;;) 
+	{
+		retval = at32x_get_flash_status(bank, &status);
+		if (retval != ERROR_OK)
+			return retval;
+		LOG_DEBUG(">status: 0x%" PRIx32 "", status);
+		if ((status & FLASH_OBF) == 0)
+			break;
+		if (timeout-- <= 0) {
+			LOG_ERROR("timed out waiting for flash");
+			return ERROR_FAIL;
+		}
+		alive_sleep(1);
+	}
+	if (status & FLASH_PRGMERR) {
+		LOG_ERROR("%s device programming failed", at32_mcu_type[at32x_info->type_id].name);
+		retval = ERROR_FAIL;
+	}
+
+	/* clear errors */
+	if (status & (FLASH_EPPERR | FLASH_PRGMERR)) {
+		target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_STS_OFFSET),
+				FLASH_EPPERR | FLASH_PRGMERR);
+	}
+	return retval;
+}
+
+static int at32x_read_usd_data(struct flash_bank *bank)
+{
+	struct at32_flash_info *at32x_info = bank->driver_priv;
+	struct target *target = bank->target;
+	uint32_t usd_data;
+	int retval;
+
+	/* read user and read protection option bytes */
+//	retval = target_read_u32(target, AT32_USD_BASE_ADDR, &usd_data);
+	retval = target_read_u32(target, at32_mcu_type[at32x_info->type_id].usd_addr, &usd_data);
+	if (retval != ERROR_OK)
+		return retval;
+
+	at32x_info->usd_data.rdp = usd_data & 0xFF;
+	at32x_info->usd_data.user = (usd_data >> 16) & 0xFF;
+
+	/* read user data option bytes */
+	retval = target_read_u32(target, at32_mcu_type[at32x_info->type_id].usd_addr+4, &usd_data);
+	if (retval != ERROR_OK)
+		return retval;
+
+	at32x_info->usd_data.data = ((usd_data >> 8) & 0xFF00) | (usd_data & 0xFF);
+
+	/* read write protection option bytes */
+	retval = target_read_u32(target, at32_mcu_type[at32x_info->type_id].usd_addr+8, &usd_data);
+	if (retval != ERROR_OK)
+		return retval;
+
+	at32x_info->usd_data.protection = ((usd_data >> 8) & 0xFF00) | (usd_data & 0xFF);
+
+	retval = target_read_u32(target, at32_mcu_type[at32x_info->type_id].usd_addr+0xc, &usd_data);
+	if (retval != ERROR_OK)
+		return retval;
+
+	at32x_info->usd_data.protection |= (((usd_data >> 8) & 0xFF00) | (usd_data & 0xFF)) << 16;
+
+	return ERROR_OK;
+}
+
+static int at32x_erase_usd_data(struct flash_bank *bank)
+{
+	struct target *target = bank->target;
+
+	at32x_set_base_reg(bank, AT32_BANK1_BASE_ADDR);
+
+	/* read user system data */
+	at32x_read_usd_data(bank);
+
+	/* unlock flash registers */
+	int retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_UNLOCK_OFFSET), KEY1);
+	if (retval != ERROR_OK)
+		return retval;
+
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_UNLOCK_OFFSET), KEY2);
+	if (retval != ERROR_OK)
+		return retval;
+
+	/* unlock user system data flash registers */
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_USD_UNLOCK_OFFSET), KEY1);
+	if (retval != ERROR_OK)
+		return retval;
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_USD_UNLOCK_OFFSET), KEY2);
+	if (retval != ERROR_OK)
+		return retval;
+
+	/* erase user system data */
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_CTRL_OFFSET), 
+							  FLASH_USDERS | FLASH_USDULKS);
+	if (retval != ERROR_OK)
+		return retval;
+	
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_CTRL_OFFSET),
+							FLASH_USDERS | FLASH_ERSTR | FLASH_USDULKS);
+	if (retval != ERROR_OK)
+		return retval;
+
+	retval = at32x_wait_status_busy(bank, FLASH_SECTOR_ERASE_TIMEOUT);
+	if (retval != ERROR_OK)
+		return retval;
+	
+	return ERROR_OK;
+}
+
+static int at32x_write_usd_data(struct flash_bank *bank)
+{
+	struct at32_flash_info *at32x_info = bank->driver_priv;
+	struct target *target = bank->target;
+
+	at32x_set_base_reg(bank, AT32_BANK1_BASE_ADDR);
+
+	/* unlock flash registers */
+	int retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_UNLOCK_OFFSET), KEY1);
+	if (retval != ERROR_OK)
+		return retval;
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_UNLOCK_OFFSET), KEY2);
+	if (retval != ERROR_OK)
+		return retval;
+
+	/* unlock option flash registers */
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_USD_UNLOCK_OFFSET), KEY1);
+	if (retval != ERROR_OK)
+		return retval;
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_USD_UNLOCK_OFFSET), KEY2);
+	if (retval != ERROR_OK)
+		return retval;
+
+	/* program option bytes */
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_CTRL_OFFSET), 
+							FLASH_USDPRGM | FLASH_USDULKS);
+	if (retval != ERROR_OK)
+		return retval;
+
+	uint8_t usd_data[16];
+
+	target_buffer_set_u16(target, usd_data, at32x_info->usd_data.rdp);
+	target_buffer_set_u16(target, usd_data + 2, at32x_info->usd_data.user);
+	target_buffer_set_u16(target, usd_data + 4, at32x_info->usd_data.data & 0xff);
+	target_buffer_set_u16(target, usd_data + 6, (at32x_info->usd_data.data >> 8) & 0xff);
+	target_buffer_set_u16(target, usd_data + 8, at32x_info->usd_data.protection & 0xff);
+	target_buffer_set_u16(target, usd_data + 10, (at32x_info->usd_data.protection >> 8) & 0xff);
+	target_buffer_set_u16(target, usd_data + 12, (at32x_info->usd_data.protection >> 16) & 0xff);
+	target_buffer_set_u16(target, usd_data + 14, (at32x_info->usd_data.protection >> 24) & 0xff);
+
+	retval = at32x_write_block(bank, usd_data, at32_mcu_type[at32x_info->type_id].usd_addr, sizeof(usd_data) / 2);
+	if (retval != ERROR_OK) {
+		if (retval == ERROR_TARGET_RESOURCE_NOT_AVAILABLE)
+			LOG_ERROR("working area required to erase options bytes");
+		return retval;
+	}
+
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_CTRL_OFFSET), FLASH_OPLK);
+	if (retval != ERROR_OK)
+		return retval;
+
+	return ERROR_OK;
+}
+
+static int at32x_protect_check(struct flash_bank *bank)
+{
+	struct target *target = bank->target;
+	uint32_t protection;
+	int retval;
+	LOG_INFO(">rotect check");
+	retval = target_read_u32(target, at32x_get_flash_reg(bank,AT32_FLASH_EPPS_OFFSET), &protection);
+	if (retval != ERROR_OK)
+		return retval;
+
+	for (unsigned int i = 0; i < bank->num_prot_blocks; i++)
+		bank->prot_blocks[i].is_protected = (protection & (1 << i)) ? 0 : 1;
+
+	return ERROR_OK;
+}
+
+static int at32x_erase(struct flash_bank *bank, unsigned int first, unsigned int last)
+{
+	struct target *target = bank->target;
+
+	int retval;
+	unsigned int i;
+
+	LOG_INFO(">erase first sector = 0x%08" PRIx32 "", first);
+	LOG_INFO(">erase_last sector = 0x%08" PRIx32 "", last);
+
+	if (bank->target->state != TARGET_HALTED) {
+		LOG_ERROR("Target not halted");
+		return ERROR_TARGET_NOT_HALTED;
+	}
+
+	if ((first == 0) && (last == (bank->num_sectors - 1)))
+		return at32x_mass_erase(bank);
+
+	/* unlock flash registers */
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_UNLOCK_OFFSET), KEY1);
+	if (retval != ERROR_OK)
+		return retval;
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_UNLOCK_OFFSET), KEY2);
+	if (retval != ERROR_OK)
+		return retval;
+	for (i = first; i <= last; i++) {
+		retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_CTRL_OFFSET), FLASH_SECERS);
+		if (retval != ERROR_OK)
+			return retval;
+		retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_ADDR_OFFSET),
+				bank->base + bank->sectors[i].offset);
+		if (retval != ERROR_OK)
+			return retval;
+		retval = target_write_u32(target,
+				at32x_get_flash_reg(bank, AT32_FLASH_CTRL_OFFSET), FLASH_SECERS | FLASH_ERSTR);
+		if (retval != ERROR_OK)
+			return retval;
+
+		retval = at32x_wait_status_busy(bank, FLASH_SECTOR_ERASE_TIMEOUT);
+		if (retval != ERROR_OK)
+			return retval;
+
+		bank->sectors[i].is_erased = 1;
+	}
+
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_CTRL_OFFSET), FLASH_OPLK);
+	if (retval != ERROR_OK)
+		return retval;
+
+	return ERROR_OK;
+}
+
+static int at32x_protect(struct flash_bank *bank, int set, unsigned int first, unsigned int last)
+{
+	struct target *target = bank->target;
+	struct at32_flash_info *at32x_info = bank->driver_priv;
+	int retval;
+	if (target->state != TARGET_HALTED) {
+		LOG_ERROR("Target not halted");
+		return ERROR_TARGET_NOT_HALTED;
+	}
+
+	retval = at32x_erase_usd_data(bank);
+	if (retval != ERROR_OK) {
+		LOG_ERROR("%s failed to erase options", at32_mcu_type[at32x_info->type_id].name);
+		return retval;
+	}
+
+	for (unsigned int i = first; i <= last; i++) {
+		if (set)
+			at32x_info->usd_data.protection &= ~(1 << i);
+		else
+			at32x_info->usd_data.protection |= (1 << i);
+	}
+
+	return at32x_write_usd_data(bank);
+}
+
+static int at32x_write_block(struct flash_bank *bank, const uint8_t *buffer,
+		uint32_t address, uint32_t count)
+{
+	struct at32_flash_info *at32x_info = bank->driver_priv;
+	struct target *target = bank->target;
+	uint32_t buffer_size = 16384;
+	struct working_area *write_algorithm;
+	struct working_area *source;
+	struct reg_param reg_params[5];
+	struct armv7m_algorithm armv7m_info;
+	int retval = ERROR_OK;
+
+	static const uint8_t at32x_flash_write_code[] = {
+			0x16,0x68,0x00,0x2e,0x18,0xd0,0x55,0x68,
+		    0xb5,0x42,0xf9,0xd0,0x2e,0x88,0x26,0x80,
+		    0x02,0x35,0x02,0x34,0xc6,0x68,0x01,0x27,
+		    0x3e,0x42,0xfb,0xd1,0x14,0x27,0x3e,0x42,
+		    0x08,0xd1,0x9d,0x42,0x01,0xd3,0x15,0x46,
+		    0x08,0x35,0x55,0x60,0x01,0x39,0x00,0x29,
+		    0x02,0xd0,0xe5,0xe7,0x00,0x20,0x50,0x60,
+		    0x30,0x46,0x00,0xbe
+	};
+
+	/* flash write code */
+	if (target_alloc_working_area(target, sizeof(at32x_flash_write_code),
+			&write_algorithm) != ERROR_OK) {
+		LOG_WARNING("no working area available, can't do block memory writes");
+		return ERROR_TARGET_RESOURCE_NOT_AVAILABLE;
+	}
+
+	retval = target_write_buffer(target, write_algorithm->address,
+			sizeof(at32x_flash_write_code), at32x_flash_write_code);
+	if (retval != ERROR_OK) {
+		target_free_working_area(target, write_algorithm);
+		return retval;
+	}
+
+	/* memory buffer */
+	while (target_alloc_working_area_try(target, buffer_size, &source) != ERROR_OK) {
+		buffer_size /= 2;
+		buffer_size &= ~3UL; /* Make sure it's 4 byte aligned */
+		if (buffer_size <= 256) {
+			/* we already allocated the writing code, but failed to get a
+			 * buffer, free the algorithm */
+			target_free_working_area(target, write_algorithm);
+
+			LOG_WARNING("no large enough working area available, can't do block memory writes");
+			return ERROR_TARGET_RESOURCE_NOT_AVAILABLE;
+		}
+	}
+
+	init_reg_param(&reg_params[0], "r0", 32, PARAM_IN_OUT);	/* flash base (in), status (out) */
+	init_reg_param(&reg_params[1], "r1", 32, PARAM_OUT);	/* count (halfword-16bit) */
+	init_reg_param(&reg_params[2], "r2", 32, PARAM_OUT);	/* buffer start */
+	init_reg_param(&reg_params[3], "r3", 32, PARAM_OUT);	/* buffer end */
+	init_reg_param(&reg_params[4], "r4", 32, PARAM_IN_OUT);	/* target address */
+
+	buf_set_u32(reg_params[0].value, 0, 32, at32x_info->cur_reg_base);
+	buf_set_u32(reg_params[1].value, 0, 32, count);
+	buf_set_u32(reg_params[2].value, 0, 32, source->address);
+	buf_set_u32(reg_params[3].value, 0, 32, source->address + source->size);
+	buf_set_u32(reg_params[4].value, 0, 32, address);
+
+	armv7m_info.common_magic = ARMV7M_COMMON_MAGIC;
+	armv7m_info.core_mode = ARM_MODE_THREAD;
+
+	retval = target_run_flash_async_algorithm(target, buffer, count, 2,
+			0, NULL,
+			5, reg_params,
+			source->address, source->size,
+			write_algorithm->address, 0,
+			&armv7m_info);
+
+	if (retval == ERROR_FLASH_OPERATION_FAILED) {
+		LOG_ERROR("flash write failed at address 0x%"PRIx32,
+				buf_get_u32(reg_params[4].value, 0, 32));
+
+		if (buf_get_u32(reg_params[0].value, 0, 32) & FLASH_PRGMERR) {
+			LOG_ERROR("flash memory not erased before writing");
+			/* Clear but report errors */
+			target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_STS_OFFSET), FLASH_PRGMERR);
+		}
+
+		if (buf_get_u32(reg_params[0].value, 0, 32) & FLASH_EPPERR) {
+			LOG_ERROR("flash memory write protected");
+			/* Clear but report errors */
+			target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_STS_OFFSET), FLASH_EPPERR);
+		}
+	}
+
+	target_free_working_area(target, source);
+	target_free_working_area(target, write_algorithm);
+
+	destroy_reg_param(&reg_params[0]);
+	destroy_reg_param(&reg_params[1]);
+	destroy_reg_param(&reg_params[2]);
+	destroy_reg_param(&reg_params[3]);
+	destroy_reg_param(&reg_params[4]);
+
+	return retval;
+}
+
+static int at32x_write(struct flash_bank *bank, const uint8_t *buffer,
+		uint32_t offset, uint32_t count)
+{
+	struct target *target = bank->target;
+	uint8_t *new_buffer = NULL;
+
+	LOG_INFO("Write offset: 0x%" PRIx32 "", offset);
+	LOG_INFO("Write count: 0x%" PRIx32 "", count);
+	
+	if (bank->target->state != TARGET_HALTED) {
+		LOG_ERROR("Target not halted");
+		return ERROR_TARGET_NOT_HALTED;
+	}
+
+	if (offset & 0x1) {
+		LOG_ERROR("offset 0x%" PRIx32 " breaks required 2-byte alignment", offset);
+		return ERROR_FLASH_DST_BREAKS_ALIGNMENT;
+	}
+
+	/* If there's an odd number of bytes, the data has to be padded. Duplicate
+	 * the buffer and use the normal code path with a single block write since
+	 * it's probably cheaper than to special case the last odd write using
+	 * discrete accesses. */
+	if (count & 1) {
+		new_buffer = malloc(count + 1);
+		if (new_buffer == NULL) {
+			LOG_ERROR("odd number of bytes to write and no memory for padding buffer");
+			return ERROR_FAIL;
+		}
+		LOG_INFO("odd number of bytes to write, padding with 0xff");
+		buffer = memcpy(new_buffer, buffer, count);
+		new_buffer[count++] = 0xff;
+	}
+
+	uint32_t words_remaining = count / 2;
+	int retval, retval2;
+
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_UNLOCK_OFFSET), KEY1);
+	if (retval != ERROR_OK)
+		goto cleanup;
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_UNLOCK_OFFSET), KEY2);
+	if (retval != ERROR_OK)
+		goto cleanup;
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_CTRL_OFFSET), FLASH_FPRGM);
+	if (retval != ERROR_OK)
+		goto cleanup;
+
+	/* try using a block write */
+	retval = at32x_write_block(bank, buffer, bank->base + offset, words_remaining);
+
+	if (retval == ERROR_TARGET_RESOURCE_NOT_AVAILABLE) {
+		/* if block write failed (no sufficient working area),
+		 * we use normal (slow) single halfword accesses */
+		LOG_WARNING("couldn't use block writes, falling back to single memory accesses");
+
+		while (words_remaining > 0) {
+			uint16_t value;
+			memcpy(&value, buffer, sizeof(uint16_t));
+
+			retval = target_write_u16(target, bank->base + offset, value);
+			if (retval != ERROR_OK)
+				goto reset_pg_and_lock;
+#if 0
+			retval = at32x_wait_status_busy(bank, 5);
+			if (retval != ERROR_OK)
+				goto reset_pg_and_lock;
+#endif
+			words_remaining--;
+			buffer += 2;
+			offset += 2;
+		}
+	}
+
+reset_pg_and_lock:
+	retval2 = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_CTRL_OFFSET), FLASH_OPLK);
+	if (retval == ERROR_OK)
+		retval = retval2;
+
+cleanup:
+	if (new_buffer)
+		free(new_buffer);
+
+	return retval;
+}
+
+
+static int at32x_probe(struct flash_bank *bank)
+{
+	struct at32_flash_info *at32x_info = bank->driver_priv;
+	int retval;
+
+	retval = at32_get_device_info(bank);
+	if (retval != ERROR_OK)
+		return retval;
+
+	/* calculate numbers of pages */
+	int num_pages = at32x_info->sector_num;
+
+	/* check that calculation result makes sense */
+	assert(num_pages > 0);
+
+	if (bank->sectors) {
+		free(bank->sectors);
+		bank->sectors = NULL;
+	}
+
+	if (bank->prot_blocks) {
+		free(bank->prot_blocks);
+		bank->prot_blocks = NULL;
+	}
+	bank->size = at32x_info->bank_size;
+	bank->num_sectors = num_pages;
+	
+	bank->sectors = alloc_block_array(0, at32x_info->sector_size, num_pages);
+	if (!bank->sectors)
+		return ERROR_FAIL;
+
+	/* calculate number of write protection blocks */
+	int num_prot_blocks = num_pages / 2;
+	if (num_prot_blocks > 32)
+		num_prot_blocks = 32;
+
+	bank->num_prot_blocks = num_prot_blocks;
+	bank->prot_blocks = alloc_block_array(0, 2 * at32x_info->sector_size, num_prot_blocks);
+	if (!bank->prot_blocks)
+		return ERROR_FAIL;
+
+	if (num_prot_blocks == 32)
+		bank->prot_blocks[31].size = (num_pages - (31 * 2)) * at32x_info->sector_size;
+
+	at32x_info->probed = 1;
+
+	return ERROR_OK;
+}
+
+static int at32x_auto_probe(struct flash_bank *bank)
+{
+	return at32x_probe(bank);
+}
+
+#if 0
+
+static int get_at32f403_info(struct flash_bank *bank, char *buf, int buf_size)
+{
+	snprintf(buf, sizeof(at32_mcu_type[support_list1[0]].name), "%s", at32_mcu_type[support_list1[0]].name);
+	return ERROR_OK;
+}
+
+static int get_at32f413_info(struct flash_bank *bank, char *buf, int buf_size)
+{
+	snprintf(buf, sizeof(at32_mcu_type[support_list1[1]].name), "%s", at32_mcu_type[support_list1[1]].name);
+	return ERROR_OK;
+}
+
+static int get_at32f415_info(struct flash_bank *bank, char *buf, int buf_size)
+{
+	snprintf(buf, sizeof(at32_mcu_type[support_list1[2]].name), "%s", at32_mcu_type[support_list1[2]].name);
+	return ERROR_OK;
+}
+
+static int get_at32f403a_info(struct flash_bank *bank, char *buf, int buf_size)
+{
+	snprintf(buf, sizeof(at32_mcu_type[support_list1[3]].name), "%s", at32_mcu_type[support_list1[3]].name);
+	return ERROR_OK;
+}
+
+static int get_at32f407_info(struct flash_bank *bank, char *buf, int buf_size)
+{
+	snprintf(buf, sizeof(at32_mcu_type[support_list1[4]].name), "%s", at32_mcu_type[support_list1[4]].name);
+	return ERROR_OK;
+}
+
+static int get_at32wb415_info(struct flash_bank *bank, char *buf, int buf_size)
+{
+	snprintf(buf, sizeof(at32_mcu_type[support_list1[5]].name), "%s", at32_mcu_type[support_list1[5]].name);
+	return ERROR_OK;
+}
+#endif
+
+static int get_at32fx_info(struct flash_bank *bank, struct command_invocation *cmd)
+{
+	at32_get_device_info(bank);
+	return ERROR_OK;
+}
+#if 0
+
+static int get_at32f413_info(struct flash_bank *bank, struct command_invocation *cmd)
+{
+//	snprintf(buf, sizeof(at32_mcu_type[support_list1[1]].name), "%s", at32_mcu_type[support_list1[1]].name);
+	return ERROR_OK;
+}
+
+static int get_at32f415_info(struct flash_bank *bank, struct command_invocation *cmd)
+{
+//	snprintf(buf, sizeof(at32_mcu_type[support_list1[2]].name), "%s", at32_mcu_type[support_list1[2]].name);
+	return ERROR_OK;
+}
+
+static int get_at32f403a_info(struct flash_bank *bank, struct command_invocation *cmd)
+{
+//	snprintf(buf, sizeof(at32_mcu_type[support_list1[3]].name), "%s", at32_mcu_type[support_list1[3]].name);
+	return ERROR_OK;
+}
+
+static int get_at32f407_info(struct flash_bank *bank, struct command_invocation *cmd)
+{
+//	snprintf(buf, sizeof(at32_mcu_type[support_list1[4]].name), "%s", at32_mcu_type[support_list1[4]].name);
+	return ERROR_OK;
+}
+
+static int get_at32wb415_info(struct flash_bank *bank, struct command_invocation *cmd)
+{
+//	snprintf(buf, sizeof(at32_mcu_type[support_list1[5]].name), "%s", at32_mcu_type[support_list1[5]].name);
+	return ERROR_OK;
+}
+#endif
+
+
+
+
+static int at32x_mass_erase(struct flash_bank *bank)
+{
+	struct target *target = bank->target;
+    int retval;
+
+	LOG_INFO("mass_erase");
+	if (target->state != TARGET_HALTED) {
+		LOG_ERROR("Target not halted");
+		return ERROR_TARGET_NOT_HALTED;
+	}
+
+	/* unlock flash registers */
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_UNLOCK_OFFSET), KEY1);
+	if (retval != ERROR_OK)
+		return retval;
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_UNLOCK_OFFSET), KEY2);
+	if (retval != ERROR_OK)
+		return retval;
+
+	/* mass erase flash memory */
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_CTRL_OFFSET), FLASH_BANKERS);
+	if (retval != ERROR_OK)
+		return retval;
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_CTRL_OFFSET),
+			FLASH_BANKERS | FLASH_ERSTR);
+	if (retval != ERROR_OK)
+		return retval;
+
+	retval = at32x_wait_status_busy(bank, FLASH_MASS_ERASE_TIMEOUT);
+	if (retval != ERROR_OK)
+		return retval;
+
+	retval = target_write_u32(target, at32x_get_flash_reg(bank, AT32_FLASH_CTRL_OFFSET), FLASH_OPLK);
+	if (retval != ERROR_OK)
+		return retval;
+
+	return ERROR_OK;
+}
+
+const struct flash_driver at32f403xx_flash = {
+	.name = "at32f403xx",//(const char *)(at32_mcu_type[support_list1[0]].name),
+//	.commands = at32x_command_handlers,
+	.flash_bank_command = at32x_flash_bank_command,
+	.erase = at32x_erase,
+	.protect = at32x_protect,
+	.write = at32x_write,
+	.read = default_flash_read,
+	.probe = at32x_probe,
+	.auto_probe = at32x_auto_probe,
+	.erase_check = default_flash_blank_check,
+	.protect_check = at32x_protect_check,
+	.info = get_at32fx_info,
+	.free_driver_priv = default_flash_free_driver_priv,
+};
+
+const struct flash_driver at32f413xx_flash = {
+	.name = "at32f413xx",//(const char *)(at32_mcu_type[support_list1[1]].name),
+//	.commands = at32x_command_handlers,
+	.flash_bank_command = at32x_flash_bank_command,
+	.erase = at32x_erase,
+	.protect = at32x_protect,
+	.write = at32x_write,
+	.read = default_flash_read,
+	.probe = at32x_probe,
+	.auto_probe = at32x_auto_probe,
+	.erase_check = default_flash_blank_check,
+	.protect_check = at32x_protect_check,
+	.info = get_at32fx_info,
+	.free_driver_priv = default_flash_free_driver_priv,
+};
+
+const struct flash_driver at32f415xx_flash = {
+	.name = "at32f415xx",//(const char *)(at32_mcu_type[support_list1[2]].name),
+//	.commands = at32x_command_handlers,
+	.flash_bank_command = at32x_flash_bank_command,
+	.erase = at32x_erase,
+	.protect = at32x_protect,
+	.write = at32x_write,
+	.read = default_flash_read,
+	.probe = at32x_probe,
+	.auto_probe = at32x_auto_probe,
+	.erase_check = default_flash_blank_check,
+	.protect_check = at32x_protect_check,
+	.info = get_at32fx_info,
+	.free_driver_priv = default_flash_free_driver_priv,
+};
+
+
+const struct flash_driver at32f403axx_flash = {
+	.name = "at32f403axx",//(const char *)(at32_mcu_type[support_list1[3]].name),
+//	.commands = at32x_command_handlers,
+	.flash_bank_command = at32x_flash_bank_command,
+	.erase = at32x_erase,
+	.protect = at32x_protect,
+	.write = at32x_write,
+	.read = default_flash_read,
+	.probe = at32x_probe,
+	.auto_probe = at32x_auto_probe,
+	.erase_check = default_flash_blank_check,
+	.protect_check = at32x_protect_check,
+	.info = get_at32fx_info,
+	.free_driver_priv = default_flash_free_driver_priv,
+};
+
+
+const struct flash_driver at32f407xx_flash = {
+	.name = "at32f407xx",//(const char *)(at32_mcu_type[support_list1[4]].name),
+//	.commands = at32x_command_handlers,
+	.flash_bank_command = at32x_flash_bank_command,
+	.erase = at32x_erase,
+	.protect = at32x_protect,
+	.write = at32x_write,
+	.read = default_flash_read,
+	.probe = at32x_probe,
+	.auto_probe = at32x_auto_probe,
+	.erase_check = default_flash_blank_check,
+	.protect_check = at32x_protect_check,
+	.info = get_at32fx_info,
+	.free_driver_priv = default_flash_free_driver_priv,
+};
+
+const struct flash_driver at32wb415xx_flash = {
+	.name = "at32wb415xx",//(const char *)(at32_mcu_type[support_list1[5]].name),
+//	.commands = at32x_command_handlers,
+	.flash_bank_command = at32x_flash_bank_command,
+	.erase = at32x_erase,
+	.protect = at32x_protect,
+	.write = at32x_write,
+	.read = default_flash_read,
+	.probe = at32x_probe,
+	.auto_probe = at32x_auto_probe,
+	.erase_check = default_flash_blank_check,
+	.protect_check = at32x_protect_check,
+	.info = get_at32fx_info,
+	.free_driver_priv = default_flash_free_driver_priv,
+};
+
+const struct flash_driver at32f421xx_flash = {
+	.name = "at32f421xx",//(const char *)(at32_mcu_type[support_list1[5]].name),
+//	.commands = at32x_command_handlers,
+	.flash_bank_command = at32x_flash_bank_command,
+	.erase = at32x_erase,
+	.protect = at32x_protect,
+	.write = at32x_write,
+	.read = default_flash_read,
+	.probe = at32x_probe,
+	.auto_probe = at32x_auto_probe,
+	.erase_check = default_flash_blank_check,
+	.protect_check = at32x_protect_check,
+	.info = get_at32fx_info,
+	.free_driver_priv = default_flash_free_driver_priv,
+};
+
+
+
+const struct flash_driver at32f425xx_flash = {
+	.name = "at32f425xx",//(const char *)(at32_mcu_type[support_list1[5]].name),
+//	.commands = at32x_command_handlers,
+	.flash_bank_command = at32x_flash_bank_command,
+	.erase = at32x_erase,
+	.protect = at32x_protect,
+	.write = at32x_write,
+	.read = default_flash_read,
+	.probe = at32x_probe,
+	.auto_probe = at32x_auto_probe,
+	.erase_check = default_flash_blank_check,
+	.protect_check = at32x_protect_check,
+	.info = get_at32fx_info,
+	.free_driver_priv = default_flash_free_driver_priv,
+};
+
+const struct flash_driver at32f435xx_flash = {
+	.name = "at32f435xx",//(const char *)(at32_mcu_type[support_list1[5]].name),
+//	.commands = at32x_command_handlers,
+	.flash_bank_command = at32x_flash_bank_command,
+	.erase = at32x_erase,
+	.protect = at32x_protect,
+	.write = at32x_write,
+	.read = default_flash_read,
+	.probe = at32x_probe,
+	.auto_probe = at32x_auto_probe,
+	.erase_check = default_flash_blank_check,
+	.protect_check = at32x_protect_check,
+	.info = get_at32fx_info,
+	.free_driver_priv = default_flash_free_driver_priv,
+};
+
+const struct flash_driver at32f437xx_flash = {
+	.name = "at32f437xx",//(const char *)(at32_mcu_type[support_list1[5]].name),
+//	.commands = at32x_command_handlers,
+	.flash_bank_command = at32x_flash_bank_command,
+	.erase = at32x_erase,
+	.protect = at32x_protect,
+	.write = at32x_write,
+	.read = default_flash_read,
+	.probe = at32x_probe,
+	.auto_probe = at32x_auto_probe,
+	.erase_check = default_flash_blank_check,
+	.protect_check = at32x_protect_check,
+	.info = get_at32fx_info,
+	.free_driver_priv = default_flash_free_driver_priv,
+};
+
+
+
+
+
diff -Nur openocd/src/flash/nor/at32xx.c openocd.arteryTek/src/flash/nor/at32xx.c
--- openocd/src/flash/nor/at32xx.c	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/src/flash/nor/at32xx.c	2023-02-20 22:11:15.243233707 +0800
@@ -0,0 +1,48 @@
+
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+#include "imp.h"
+#include <helper/binarybuffer.h>
+#include <target/algorithm.h>
+#include <target/armv7m.h>
+#include "at32xx.h"
+
+
+/*403/413/415/403a/407/421/wb415*/
+#define AT32_FLASH_BANK1_REG_1              0x40022000
+#define AT32_FLASH_BANK2_REG_1              0x40022040
+
+
+/*403/413/415/403a/407/421/wb415*/
+
+#define AT32_BANK1_BASE_ADDR_2              0x40023C00
+#define AT32_BANK2_BASE_ADDR_2              0x40023C40
+
+
+#define AT32_USD_ADDR_1                     0x1FFFF800
+#define AT32_USD_ADDR_2                     0x1FFFFC00
+
+
+
+
+
+mcu_type_info at32_mcu_type[NUM_OF_MCU_TYPE] = 
+{
+    //project id             
+	{AT32F403XX_ID,   AT32_FLASH_BANK1_REG_1, AT32_FLASH_BANK2_REG_1, AT32_USD_ADDR_1, "at32403xx"},
+	{AT32F413XX_ID,   AT32_FLASH_BANK1_REG_1, 0, AT32_USD_ADDR_1, "at32413xx"},
+	{AT32F415XX_ID,   AT32_FLASH_BANK1_REG_1, 0, AT32_USD_ADDR_1, "at32f415xx"},
+	{AT32F403AXX_ID,  AT32_FLASH_BANK1_REG_1, AT32_FLASH_BANK2_REG_1, AT32_USD_ADDR_1, "at32f403axx"},
+	{AT32F407XX_ID,   AT32_FLASH_BANK1_REG_1, AT32_FLASH_BANK2_REG_1, AT32_USD_ADDR_1, "at32f407xx"},
+	{AT32F421XX_ID,   AT32_FLASH_BANK1_REG_1, 0, AT32_USD_ADDR_1, "at32f421xx"},
+	{AT32F435XX_ID,   AT32_BANK1_BASE_ADDR_2, AT32_BANK2_BASE_ADDR_2, AT32_USD_ADDR_2, "at32f435xx"},
+	{AT32F437XX_ID,   AT32_BANK1_BASE_ADDR_2, AT32_BANK2_BASE_ADDR_2, AT32_USD_ADDR_2, "at32f437xx"},
+	{AT32F425XX_ID,   AT32_FLASH_BANK1_REG_1, 0, AT32_USD_ADDR_1, "at32f425xx"},
+	{AT32L021XX_ID,   AT32_FLASH_BANK1_REG_1, 0, AT32_USD_ADDR_1, "at32l021xx"},
+	{AT32WB415XX_ID,  AT32_FLASH_BANK1_REG_1, 0, AT32_USD_ADDR_1, "at32wb415xx"}
+};
+
+
+
diff -Nur openocd/src/flash/nor/at32xx.h openocd.arteryTek/src/flash/nor/at32xx.h
--- openocd/src/flash/nor/at32xx.h	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/src/flash/nor/at32xx.h	2023-02-20 22:11:15.243233707 +0800
@@ -0,0 +1,54 @@
+
+#ifndef AT32_XX_H
+#define AT32_XX_H
+
+#define NUM_OF_MCU_TYPE                   0x0B
+
+#define AT32F403XX_ID                     0x02
+#define AT32F413XX_ID                     0x04
+#define AT32F415XX_ID                     0x05
+#define AT32F403AXX_ID                    0x07
+#define AT32F407XX_ID                     0x08
+#define AT32F421XX_ID                     0x09
+#define AT32F435XX_ID                     0x0D
+#define AT32F437XX_ID                     0x0E
+#define AT32F425XX_ID                     0x0F
+#define AT32L021XX_ID                     0x10
+#define AT32WB415XX_ID                    0x11
+
+/* at32 mcu type*/
+typedef struct mcu_type_info_
+{
+	uint8_t        project_id;
+	uint32_t       flash_bank1_reg;
+	uint32_t       flash_bank2_reg;
+	uint32_t       usd_addr;
+	const char     name[32];
+}mcu_type_info;
+
+
+#if 0
+static mcu_type_info mcu_type[NUM_OF_MCU_TYPE] = 
+{
+    //project id             project id addr   flash size addr       pid address      bank1 base    bank2 base    bank3 base     usd addr        usd size
+//	{AT32F403XX_ID,   0x1FFFF7F3,    0x1FFFF7E0,    0xE0042000,  0x40022000, 0x40022040, 0x40022080, 0x1FFFF800,   48,     "AT32F403 series"},
+//	{AT32F413XX_ID,   0x1FFFF7F3,    0x1FFFF7E0,    0xE0042000,  0x40022000, 0,          0x40022080, 0x1FFFF800,   48,     "AT32F413 series"},
+//	{AT32F415XX_ID,   0x1FFFF7F3,    0x1FFFF7E0,    0xE0042000,  0x40022000, 0,          0,          0x1FFFF800,   1024,   "AT32F415 series"},
+	{AT32F403AXX_ID,  0x1FFFF7F3,    0x1FFFF7E0,    0xE0042000,  0x40022000, 0x40022040, 0x40022080, 0x1FFFF800,   48,     "AT32F403A series"},
+//	{AT32F407XX_ID,   0x1FFFF7F3,    0x1FFFF7E0,    0xE0042000,  0x40022000, 0x40022040, 0x40022080, 0x1FFFF800,   48,     "AT32F407 series"},
+//	{AT32F421XX_ID,   0x1FFFF7F3,    0x1FFFF7E0,    0xE0042000,  0x40022000, 0,          0,          0x1FFFF800,   512,    "AT32F421 series"},
+//	{AT32F435XX_ID,   0x1FFFF7F3,    0x1FFFF7E0,    0xE0042000,  0x40023C00, 0x40023C40, 0,          0x1FFFFC00,   512,    "AT32F435 series"},
+//	{AT32F437XX_ID,   0x1FFFF7F3,    0x1FFFF7E0,    0xE0042000,  0x40023C00, 0x40023C40, 0,          0x1FFFFC00,   512,    "AT32F437 series"},
+//	{AT32F425XX_ID,   0x1FFFF7F3,    0x1FFFF7E0,    0xE0042000,  0x40022000, 0,          0,          0x1FFFF800,   512,    "AT32F421 series"},
+};
+#endif
+
+
+
+extern mcu_type_info at32_mcu_type[NUM_OF_MCU_TYPE];
+
+
+
+#endif
+
+
diff -Nur openocd/src/flash/nor/drivers.c openocd.arteryTek/src/flash/nor/drivers.c
--- openocd/src/flash/nor/drivers.c	2023-01-15 17:56:19.000000000 +0800
+++ openocd.arteryTek/src/flash/nor/drivers.c	2023-02-20 22:11:15.243233707 +0800
@@ -79,6 +79,16 @@
 extern const struct flash_driver xmc1xxx_flash;
 extern const struct flash_driver xmc4xxx_flash;
 extern const struct flash_driver rsl10_flash;
+extern const struct flash_driver at32f403xx_flash;
+extern const struct flash_driver at32f413xx_flash;
+extern const struct flash_driver at32f415xx_flash;
+extern const struct flash_driver at32f403axx_flash;
+extern const struct flash_driver at32f407xx_flash;
+extern const struct flash_driver at32wb415xx_flash;
+extern const struct flash_driver at32f421xx_flash;
+extern const struct flash_driver at32f425xx_flash;
+extern const struct flash_driver at32f435xx_flash;
+extern const struct flash_driver at32f437xx_flash;
 
 /**
  * The list of built-in flash drivers.
@@ -155,6 +165,16 @@
 	&xmc4xxx_flash,
 	&w600_flash,
 	&rsl10_flash,
+	&at32f403xx_flash,
+	&at32f413xx_flash,
+	&at32f415xx_flash,
+	&at32f403axx_flash,
+	&at32f407xx_flash,
+	&at32wb415xx_flash,
+	&at32f421xx_flash,
+	&at32f425xx_flash,
+	&at32f435xx_flash,
+	&at32f437xx_flash,
 	NULL,
 };
 
diff -Nur openocd/src/flash/nor/Makefile.am openocd.arteryTek/src/flash/nor/Makefile.am
--- openocd/src/flash/nor/Makefile.am	2023-01-15 17:56:19.000000000 +0800
+++ openocd.arteryTek/src/flash/nor/Makefile.am	2023-02-20 22:11:15.243233707 +0800
@@ -78,7 +78,9 @@
 	%D%/w600.c \
 	%D%/xcf.c \
 	%D%/xmc1xxx.c \
-	%D%/xmc4xxx.c
+	%D%/xmc4xxx.c \
+	%D%/at32f4xx.c \
+	%D%/at32xx.c
 
 NORHEADERS = \
 	%D%/core.h \
diff -Nur openocd/tcl/interface/atlink.cfg openocd.arteryTek/tcl/interface/atlink.cfg
--- openocd/tcl/interface/atlink.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/interface/atlink.cfg	2023-02-20 22:11:15.244233708 +0800
@@ -0,0 +1,13 @@
+#
+# ARM CMSIS-DAP compliant adapter
+#
+# http://www.keil.com/support/man/docs/dapdebug/
+#
+
+adapter driver cmsis-dap
+transport select swd
+adapter speed 5000
+cmsis_dap_backend hid
+
+# Optionally specify the serial number of CMSIS-DAP usb device.
+# adapter serial 02200201E6661E601B98E3B9
diff -Nur openocd/tcl/interface/atlink_dap_v2.cfg openocd.arteryTek/tcl/interface/atlink_dap_v2.cfg
--- openocd/tcl/interface/atlink_dap_v2.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/interface/atlink_dap_v2.cfg	2023-02-20 22:11:15.244233708 +0800
@@ -0,0 +1,14 @@
+#
+# ARM CMSIS-DAP compliant adapter
+#
+# http://www.keil.com/support/man/docs/dapdebug/
+#
+
+adapter driver cmsis-dap
+transport select swd
+adapter speed 5000
+cmsis_dap_backend usb_bulk
+cmsis_dap_usb interface 3
+
+# Optionally specify the serial number of CMSIS-DAP usb device.
+# adapter serial 02200201E6661E601B98E3B9
diff -Nur openocd/tcl/target/at32f403axG.cfg openocd.arteryTek/tcl/target/at32f403axG.cfg
--- openocd/tcl/target/at32f403axG.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32f403axG.cfg	2023-02-20 22:11:15.244233708 +0800
@@ -0,0 +1,88 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32f403axx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+set _FLASHNAME $_CHIPNAME.bank2
+flash bank $_FLASHNAME $_CHIPNAME 0x08080000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
diff -Nur openocd/tcl/target/at32f403axx.cfg openocd.arteryTek/tcl/target/at32f403axx.cfg
--- openocd/tcl/target/at32f403axx.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32f403axx.cfg	2023-02-20 22:11:15.244233708 +0800
@@ -0,0 +1,86 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32f403axx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
diff -Nur openocd/tcl/target/at32f403xG.cfg openocd.arteryTek/tcl/target/at32f403xG.cfg
--- openocd/tcl/target/at32f403xG.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32f403xG.cfg	2023-02-20 22:11:15.244233708 +0800
@@ -0,0 +1,88 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32f403xx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+set _FLASHNAME $_CHIPNAME.bank2
+flash bank $_FLASHNAME $_CHIPNAME 0x08080000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
diff -Nur openocd/tcl/target/at32f403xx.cfg openocd.arteryTek/tcl/target/at32f403xx.cfg
--- openocd/tcl/target/at32f403xx.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32f403xx.cfg	2023-02-20 22:11:15.244233708 +0800
@@ -0,0 +1,86 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32f403xx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
diff -Nur openocd/tcl/target/at32f407xG.cfg openocd.arteryTek/tcl/target/at32f407xG.cfg
--- openocd/tcl/target/at32f407xG.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32f407xG.cfg	2023-02-20 22:11:15.244233708 +0800
@@ -0,0 +1,88 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32f407xx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+set _FLASHNAME $_CHIPNAME.bank2
+flash bank $_FLASHNAME $_CHIPNAME 0x08080000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
diff -Nur openocd/tcl/target/at32f407xx.cfg openocd.arteryTek/tcl/target/at32f407xx.cfg
--- openocd/tcl/target/at32f407xx.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32f407xx.cfg	2023-02-20 22:11:15.244233708 +0800
@@ -0,0 +1,86 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32f407xx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
diff -Nur openocd/tcl/target/at32f413xx.cfg openocd.arteryTek/tcl/target/at32f413xx.cfg
--- openocd/tcl/target/at32f413xx.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32f413xx.cfg	2023-02-20 22:11:15.244233708 +0800
@@ -0,0 +1,86 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32f413xx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
diff -Nur openocd/tcl/target/at32f415xx.cfg openocd.arteryTek/tcl/target/at32f415xx.cfg
--- openocd/tcl/target/at32f415xx.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32f415xx.cfg	2023-02-20 22:11:15.245233709 +0800
@@ -0,0 +1,86 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32f415xx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
diff -Nur openocd/tcl/target/at32f421xx.cfg openocd.arteryTek/tcl/target/at32f421xx.cfg
--- openocd/tcl/target/at32f421xx.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32f421xx.cfg	2023-02-20 22:11:15.245233709 +0800
@@ -0,0 +1,86 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32f421xx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
diff -Nur openocd/tcl/target/at32f425xx.cfg openocd.arteryTek/tcl/target/at32f425xx.cfg
--- openocd/tcl/target/at32f425xx.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32f425xx.cfg	2023-02-20 22:11:15.245233709 +0800
@@ -0,0 +1,86 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32f425xx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
diff -Nur openocd/tcl/target/at32f435xG.cfg openocd.arteryTek/tcl/target/at32f435xG.cfg
--- openocd/tcl/target/at32f435xG.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32f435xG.cfg	2023-02-20 22:11:15.245233709 +0800
@@ -0,0 +1,88 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32f435xx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+set _FLASHNAME $_CHIPNAME.bank2
+flash bank $_FLASHNAME $_CHIPNAME 0x08080000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
diff -Nur openocd/tcl/target/at32f435xM.cfg openocd.arteryTek/tcl/target/at32f435xM.cfg
--- openocd/tcl/target/at32f435xM.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32f435xM.cfg	2023-02-20 22:11:15.245233709 +0800
@@ -0,0 +1,88 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32f435xx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+set _FLASHNAME $_CHIPNAME.bank2
+flash bank $_FLASHNAME $_CHIPNAME 0x08200000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
diff -Nur openocd/tcl/target/at32f435xx.cfg openocd.arteryTek/tcl/target/at32f435xx.cfg
--- openocd/tcl/target/at32f435xx.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32f435xx.cfg	2023-02-20 22:11:15.245233709 +0800
@@ -0,0 +1,86 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32f435xx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
diff -Nur openocd/tcl/target/at32f437xG.cfg openocd.arteryTek/tcl/target/at32f437xG.cfg
--- openocd/tcl/target/at32f437xG.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32f437xG.cfg	2023-02-20 22:11:15.245233709 +0800
@@ -0,0 +1,88 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32f437xx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+set _FLASHNAME $_CHIPNAME.bank2
+flash bank $_FLASHNAME $_CHIPNAME 0x08080000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
diff -Nur openocd/tcl/target/at32f437xM.cfg openocd.arteryTek/tcl/target/at32f437xM.cfg
--- openocd/tcl/target/at32f437xM.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32f437xM.cfg	2023-02-20 22:11:15.245233709 +0800
@@ -0,0 +1,88 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32f437xx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+set _FLASHNAME $_CHIPNAME.bank2
+flash bank $_FLASHNAME $_CHIPNAME 0x08200000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
diff -Nur openocd/tcl/target/at32f437xx.cfg openocd.arteryTek/tcl/target/at32f437xx.cfg
--- openocd/tcl/target/at32f437xx.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32f437xx.cfg	2023-02-20 22:11:15.245233709 +0800
@@ -0,0 +1,86 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32f437xx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
diff -Nur openocd/tcl/target/at32wb415xx.cfg openocd.arteryTek/tcl/target/at32wb415xx.cfg
--- openocd/tcl/target/at32wb415xx.cfg	1970-01-01 08:00:00.000000000 +0800
+++ openocd.arteryTek/tcl/target/at32wb415xx.cfg	2023-02-20 22:11:15.245233709 +0800
@@ -0,0 +1,86 @@
+# script for AT32f4xx family
+
+#
+# AT32 devices support both JTAG and SWD transports.
+#
+source [find target/swj-dp.tcl]
+source [find mem_helper.tcl]
+
+if { [info exists CHIPNAME] } {
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME at32wb415xx
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+# Work-area is a space in RAM used for flash programming
+# By default use 64kB
+if { [info exists WORKAREASIZE] } {
+   set _WORKAREASIZE $WORKAREASIZE
+} else {
+   set _WORKAREASIZE 0x1000
+}
+
+#jtag scan chain
+if { [info exists CPUTAPID] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   if { [using_jtag] } {
+      set _CPUTAPID 0x4ba00477
+   } else {
+      set _CPUTAPID 0x2ba01477
+   }
+}
+
+# Allow overriding the Flash bank size
+if { [info exists FLASH_SIZE] } {
+    set _FLASH_SIZE $FLASH_SIZE
+} else {
+    # autodetect size
+    set _FLASH_SIZE 0
+}
+
+
+swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu
+
+set _TARGETNAME $_CHIPNAME.cpu
+target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
+
+$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
+
+# flash size will be probed
+set _FLASHNAME $_CHIPNAME.bank1
+flash bank $_FLASHNAME $_CHIPNAME 0x08000000 0 0 0 $_TARGETNAME
+
+
+# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
+adapter_khz 5000
+
+adapter_nsrst_delay 100
+
+reset_config srst_nogate
+
+if {![using_hla]} {
+    # if srst is not fitted use SYSRESETREQ to
+    # perform a soft reset
+    cortex_m reset_config sysresetreq
+}
+
+$_TARGETNAME configure -event examine-end {
+	# DBGMCU_CR |= DBG_WWDG_STOP | DBG_IWDG_STOP |
+	#              DBG_STANDBY | DBG_STOP | DBG_SLEEP
+	mmw 0xE0042004 0x00000307 0
+}
+
+$_TARGETNAME configure -event trace-config {
+	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
+	# change this value accordingly to configure trace pins
+	# assignment
+	mmw 0xE0042004 0x00000020 0
+}
